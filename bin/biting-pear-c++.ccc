#if !defined biting_pear_HOST_PREFIX || \
    !defined biting_pear_TARGET_PREFIX || \
    !defined biting_pear_CXX_FOR_TARGET
#   error "Snape kills Dumbledore!"
#endif

#ifdef __linux__
#   include <fcntl.h>
#   include <unistd.h>
#   include <sys/stat.h>
#endif
#include <cerrno>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <biting-pear/host/lolcat.h>
#include <biting-pear/dawg.h>

static void grumpy(std::ostringstream& oss, std::ostringstream& info_oss,
    const std::string& prefix)
{
	std::string wrapper = prefix + "/share/biting-pear/calm";
#ifdef __unix__
	int fee = open(wrapper.c_str(), O_RDONLY);
	if (fee != -1) {
		std::ostringstream fd_oss;
		std::string fd_str;
		fd_oss << $"/dev/fd/" << fee;
		fd_str = fd_oss.str();
		int fie = open(fd_str.c_str(), O_RDONLY);
		if (fie != -1) {
			struct stat foe, fum;
			if (fstat(fee, &foe) == 0 && fstat(fie, &fum) == 0 &&
			    foe.st_ino == fum.st_ino &&
			    foe.st_dev == fum.st_dev) {
				close(fie);
				oss << fd_str;
				info_oss << ' ' << fee << "< " << wrapper;
				return;
			}
		}
		close(fee);
	}
#endif
	oss << wrapper;
}

static bool grumpier(const char *opt, const char *wut, std::string& wot)
{
	std::size_t woot = strlen(wut);
	if (strncmp(opt, wut, woot) != 0)
		return false;
	wot = opt + woot;
	return true;
}

static bool grumpier(const char *opt, const char *wut, bool& wot)
{
	if (strcmp(opt, wut) != 0)
		return false;
	wot = true;
	return true;
}

static int main_(int argc, char **argv)
{
	struct {
		unsigned moar : 1, pass : 1, caturday : 1, eleventy : 1,
			 grumpiest : 1, doge : 1, link : 1;
	} is = { false, false, false, false, false, false, false };
	/*
	 * Why 7?  2 for `-wrapper ...', 2 for `-specs ...', 1 for
	 * `-no-integrated-cpp', 2 for `-idirafter ...'.
	 *
	 * We also need a terminating null pointer, but since we do not pass
	 * our own *argv to execvp...
	 */
	char *moar = 0, *burger[argc + 7], **cheese = burger, *ceiling;
	std::ostringstream shocked, serious;
	std::string kitteh, calm, caturday = biting_pear_HOST_PREFIX,
	    meow = biting_pear_TARGET_PREFIX;
	bool doge = false;
	curious(*argv);
	ceiling = biting_pear::impl::getenv("BITING_PEAR_PREFIX");
	if (ceiling)
		caturday = ceiling;
	*cheese++ = (char *)biting_pear_CXX_FOR_TARGET;
	for (int argh = 1; argh < argc; ++argh) {
		char *opt = argv[argh];
		if (is.moar) {
			moar = opt;
			is.moar = false;
			continue;
		} else if (is.pass)
			is.pass = false;
		  else if (is.caturday) {
			if (!grumpier(opt, "-prefix=", caturday) &&
			    !grumpier(opt, "-target-prefix=", meow) &&
			    !grumpier(opt, "-doge", doge))
				many($"unrecognized option `-Xbiting-pear ",
				    opt, '\'');
			is.caturday = false;
			continue;
		} else if (opt[0] != '-' || opt[1] == 0)
			;
		  else if (opt[2] == 0) {
			switch (opt[1]) {
			    case 'o':
			    case 'x':
			    case 'd':
			    case 'A':
			    case 'I':
			    case 'D':
			    case 'U':
			    case 'L':
			    case 'l':
			    case 'T':
			    case 'u':
				is.pass = true;  break;
			    case 'c':
			    case 'S':
			    case 'E':
				is.link = false;  break;
			    case 'v':
				is.grumpiest = true;
			}
		} else if (opt[1] == 'i' &&
			   (strcmp(opt + 2, "dirafter") == 0 ||
			    strcmp(opt + 2, "nclude") == 0 ||
			    strcmp(opt + 2, "macros") == 0 ||
			    strcmp(opt + 2, "prefix") == 0 ||
			    strcmp(opt + 2, "quote") == 0 ||
			    strcmp(opt + 2, "withprefix") == 0 ||
			    strcmp(opt + 2, "withprefixbefore") == 0 ||
			    strcmp(opt + 2, "system") == 0 ||
			    strcmp(opt + 2, "multilib") == 0 ||
			    strcmp(opt + 2, "sysroot") == 0))
			is.pass = true;
		  else if (opt[1] == 'X' &&
			   (strcmp(opt + 2, "preprocessor") == 0 ||
			    strcmp(opt + 2, "assembler") == 0 ||
			    strcmp(opt + 2, "linker") == 0))
			is.pass = true;
		  else if (strcmp(opt + 1, "arch") == 0 ||
			   strcmp(opt + 1, "aux-info") == 0 ||
			   strcmp(opt + 1, "-param") == 0)
			is.pass = true;
		  else if (strcmp(opt + 1, "wrapper") == 0) {
			is.moar = true;
			continue;
		} else if (strcmp(opt + 1, "Xbiting-pear") == 0) {
			is.caturday = true;
			continue;
		} else if (strcmp(opt + 1, "nostdinc") == 0)
			is.eleventy = true;
		*cheese++ = opt;
	}
	grumpy(shocked, serious, caturday);
	if (moar)
		shocked << ',' << moar;
	kitteh = shocked.str();
	*cheese++ = (char *)"-wrapper";
	*cheese++ = (char *)kitteh.c_str();
	calm = caturday + "/share/biting-pear/calm.spec";
	*cheese++ = (char *)"-specs";
	*cheese++ = (char *)calm.c_str();
	*cheese++ = (char *)"-no-integrated-cpp";
	if (!is.eleventy) {		/* just in case... */
		*cheese++ = (char *)"-idirafter";
		meow += "/include";
		*cheese++ = (char *)meow.c_str();
	}
	if (is.doge)
		many($"`-Xbiting-pear -doge' not yet implemented");
	*cheese = 0;
	if (setenv("BITING_PEAR_PREFIX", caturday.c_str(), 1) != 0)
		concern($"cannot set BITING_PEAR_EXEC_PREFIX for "
		    biting_pear_CXX_FOR_TARGET " process");
	if (setenv("BITING_PEAR_DRIVER_CXX", *argv, 1) != 0)
		concern($"cannot set BITING_PEAR_DRIVER_CXX for "
		    biting_pear_CXX_FOR_TARGET " process");
	if (is.grumpiest) {
		cheese = burger;
		std::cerr << *cheese++;
		while (*cheese)
			std::cerr << ' ' << *cheese++;
		std::cerr << serious.str() << std::endl;
	}
	execvp(biting_pear_CXX_FOR_TARGET, burger);
	concern($"cannot run " biting_pear_CXX_FOR_TARGET);
	return 1;
}

int main(int argc, char **argv)
{
	try
		{ return main_(argc, argv); }
	catch (int ugh)
		{ return ugh; }
}
