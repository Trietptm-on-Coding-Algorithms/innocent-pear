#if !defined biting_pear_HOST_PREFIX || \
    !defined biting_pear_TARGET_PREFIX || \
    !defined biting_pear_CXX_FOR_TARGET
#   error "Snape kills Dumbledore!"
#endif

#ifdef __linux__
#   include <fcntl.h>
#   include <unistd.h>
#   include <sys/stat.h>
#endif
#include <cerrno>
#include <cstdio>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <biting-pear/host/lolcat.h>
#include <biting-pear/dawg.h>

static void grumpy(std::ostringstream& oss, std::ostringstream& info_oss,
    const std::string& prefix)
{
	std::string wrapper = prefix + "/share/biting-pear/calm";
#ifdef __unix__
	int fee = open(wrapper.c_str(), O_RDONLY);
	if (fee != -1) {
		std::ostringstream fd_oss;
		std::string fd_str;
		fd_oss << $"/dev/fd/" << fee;
		fd_str = fd_oss.str();
		int fie = open(fd_str.c_str(), O_RDONLY);
		if (fie != -1) {
			struct stat foe, fum;
			if (fstat(fee, &foe) == 0 && fstat(fie, &fum) == 0 &&
			    foe.st_ino == fum.st_ino &&
			    foe.st_dev == fum.st_dev) {
				close(fie);
				oss << fd_str;
				info_oss << ' ' << fee << "< " << wrapper;
				return;
			}
		}
		close(fee);
	}
#endif
	oss << wrapper;
}

static bool grumpier(const char *opt, const char *wut, std::string& wot)
{
	std::size_t woot = strlen(wut);
	if (strncmp(opt, wut, woot) != 0)
		return false;
	wot = opt + woot;
	return true;
}

static bool grumpier(const char *opt, const char *wut, bool& wot)
{
	if (strcmp(opt, wut) != 0)
		return false;
	wot = true;
	return true;
}

template<class... Ts>
inline void push(std::ostringstream&, Ts...);

__attribute__((always_inline))
inline void push(std::ostringstream&)
	{ }

template<class T, class... Ts>
__attribute__((always_inline))
inline void push(std::ostringstream& oss, T x, Ts... xs)
{
	oss << x;
	push(oss, xs...);
}

template<class... Ts>
inline char *pusheen(Ts...);

template<class... Ts>
__attribute__((always_inline))
inline char *pusheen(Ts... msg)
{
	std::ostringstream oss;
	push(oss, msg...);
	std::string *s = new std::string(oss.str());
	return (char *)s->c_str();
}

static void nyan(char *& cheesy, const char *cheeses,
    biting_pear::impl::rand_state_t state, char *cheesier, bool v, bool sta)
{
	if (cheeses) {
		char cheese[strlen(cheeses) + 17];
		std::snprintf(cheese, sizeof cheese, "%s.biting-pear.tmp",
		    cheeses);
		cheesy = sleepier(cheeses);
	} else
		cheesy = sleepier("biting-pear.tmp");
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wwrite-strings"
	char *cheesiest[] = {
		biting_pear_CXX_FOR_TARGET,
		biting_pear_CXXFLAGS_FOR_TARGET /* ... */,
		pusheen($"-Dbiting_pear_DOGE_STATE=0x", std::hex, state),
		sta ? (char *)"-Ubiting_pear_DYN_LD_CXX_TARGET" :
		      (char *)"-Dbiting_pear_DYN_LD_CXX_TARGET",
		"-c", cheesier, "-o", cheesy,
		sta ? (char *)"-static" : 0,
		0
	    };
#pragma GCC diagnostic pop
	keyboardest(cheesiest, 0, 0, v);
}

static int main_(int argc, char **argv, char *& doge_1, char *& doge_i,
    char *& doge_n)
{
	struct {
		unsigned moar : 1, pass : 1, caturday : 1, eleventy : 1,
			 grumpiest : 1, link : 1, starts : 1, o : 1,
			 sta : 1;
	} is = { false, false, false, false, false, true, true, false,
#ifdef biting_pear_DYN_LD_CXX_TARGET
		 false
#else
		 true
#endif
		 };
	/*
	 * Why 11?  2 for `-wrapper ...', 2 for `-specs ...', 1 for
	 * `-no-integrated-cpp', 2 for `-idirafter ...', 4 (== 6 - 2) for
	 * `-Wl,-z,biting-pear-doge=...', (doge-1.o), (doge-i.o), `-x'
	 * `-none', and (doge-n.o), minus the `-Xbiting-pear' `-doge'.
	 *
	 * We also need a terminating null pointer, but since we do not pass
	 * our own *argv to execvp...
	 */
	char *moar = 0, *burger[argc + 11], **cheese = burger, *cheeses = 0,
	    *burgery[argc], **cheesy = burgery, *ceiling;
	std::ostringstream shocked, serious;
	std::string kitteh, calm, caturday = biting_pear_HOST_PREFIX,
	    meow = biting_pear_TARGET_PREFIX;
	bool doge = false;
	curious(*argv);
	ceiling = biting_pear::impl::getenv("BITING_PEAR_PREFIX");
	if (ceiling)
		caturday = ceiling;
	*cheese++ = (char *)biting_pear_CXX_FOR_TARGET;
	for (int argh = 1; argh < argc; ++argh) {
		char *opt = argv[argh];
		if (is.moar) {
			moar = opt;
			is.moar = false;
			continue;
		} else if (is.pass)
			is.pass = false;
		  else if (is.o) {
			cheeses = opt;
			is.o = false;
		} else if (is.caturday) {
			if (!grumpier(opt, "-prefix=", caturday) &&
			    !grumpier(opt, "-target-prefix=", meow) &&
			    !grumpier(opt, "-doge", doge))
				many($"unrecognized option `-Xbiting-pear ",
				    opt, '\'');
			is.caturday = false;
			continue;
		} else if (opt[0] != '-' || opt[1] == 0)
			*cheesy++ = opt;
		  else if (opt[2] == 0) {
			switch (opt[1]) {
			    case 'x':
			    case 'd':
			    case 'A':
			    case 'I':
			    case 'D':
			    case 'U':
			    case 'L':
			    case 'l':
			    case 'T':
			    case 'u':
				is.pass = true;  break;
			    case 'o':
				is.o = true;  break;
			    case 'c':
			    case 'S':
			    case 'E':
				is.link = false;  break;
			    case 'v':
				is.grumpiest = true;
			}
		} else if (opt[1] == 'i' &&
			   (strcmp(opt + 2, "dirafter") == 0 ||
			    strcmp(opt + 2, "nclude") == 0 ||
			    strcmp(opt + 2, "macros") == 0 ||
			    strcmp(opt + 2, "prefix") == 0 ||
			    strcmp(opt + 2, "quote") == 0 ||
			    strcmp(opt + 2, "withprefix") == 0 ||
			    strcmp(opt + 2, "withprefixbefore") == 0 ||
			    strcmp(opt + 2, "system") == 0 ||
			    strcmp(opt + 2, "multilib") == 0 ||
			    strcmp(opt + 2, "sysroot") == 0))
			is.pass = true;
		  else if (opt[1] == 'n' &&
			   (strcmp(opt + 2, "ostartfiles") == 0 ||
			    strcmp(opt + 2, "ostdlib") == 0))
			is.starts = false;
		  else if (opt[1] == 'X' &&
			   (strcmp(opt + 2, "preprocessor") == 0 ||
			    strcmp(opt + 2, "assembler") == 0 ||
			    strcmp(opt + 2, "linker") == 0))
			is.pass = true;
		  else if (strcmp(opt + 1, "arch") == 0 ||
			   strcmp(opt + 1, "aux-info") == 0 ||
			   strcmp(opt + 1, "-param") == 0)
			is.pass = true;
		  else if (strcmp(opt + 1, "wrapper") == 0) {
			is.moar = true;
			continue;
		} else if (strcmp(opt + 1, "Xbiting-pear") == 0) {
			is.caturday = true;
			continue;
		} else if (strcmp(opt + 1, "nostdinc") == 0)
			is.eleventy = true;
#ifdef biting_pear_DYN_LD_CXX_TARGET
		  else if (strcmp(opt + 1, "static") == 0)
			is.sta = true;
#endif
		*cheese++ = opt;
	}
	grumpy(shocked, serious, caturday);
	if (moar)
		shocked << ',' << moar;
	kitteh = shocked.str();
	*cheese++ = (char *)"-wrapper";
	*cheese++ = (char *)kitteh.c_str();
	calm = caturday + "/share/biting-pear/calm.spec";
	*cheese++ = (char *)"-specs";
	*cheese++ = (char *)calm.c_str();
	*cheese++ = (char *)"-no-integrated-cpp";
	if (!is.eleventy) {		/* just in case... */
		*cheese++ = (char *)"-idirafter";
		meow += "/include";
		*cheese++ = (char *)meow.c_str();
	}
	*cheese = 0;
	if (setenv("BITING_PEAR_PREFIX", caturday.c_str(), 1) != 0)
		concern($"cannot set BITING_PEAR_EXEC_PREFIX for "
		    biting_pear_CXX_FOR_TARGET " process");
	if (setenv("BITING_PEAR_DRIVER_CXX", *argv, 1) != 0)
		concern($"cannot set BITING_PEAR_DRIVER_CXX for "
		    biting_pear_CXX_FOR_TARGET " process");
	if (doge && is.link) {
		using biting_pear::impl::uint_least64_t;
		using biting_pear::impl::rand_state_t;
		uint_least64_t crc = 0;
		while (cheesy != burgery) {
			--cheesy;
			crc = file_crc64(*cheesy, 0, crc);
		}
		if (is.starts) {
			nyan(doge_1, cheeses, (rand_state_t)crc, pusheen(
			    caturday, $"/share/biting-pear/doge-1.cc"),
			    is.grumpiest, is.sta);
			nyan(doge_i, cheeses, (rand_state_t)crc, pusheen(
			    caturday, $"/share/biting-pear/doge-i.cc"),
			    is.grumpiest, is.sta);
			nyan(doge_n, cheeses, (rand_state_t)crc, pusheen(
			    caturday, $"/share/biting-pear/doge-n.cc"),
			    is.grumpiest, is.sta);
			std::memmove(burger + 4, burger + 1,
			    (cheese - burger - 1) * sizeof(char *));
			cheese += 3;
			burger[1] = pusheen($"-Wl,-z,-biting-pear-doge=0x",
			    std::hex, crc);
			burger[2] = doge_1;
			burger[3] = doge_i;
			*cheese++ = (char *)"-x";
			*cheese++ = (char *)"none";
			*cheese++ = doge_n;
		} else {
			std::memmove(burger + 2, burger + 1,
			    (cheese - burger - 1) * sizeof(char *));
			++cheese;
			burger[1] = pusheen($"-Wl,-z,-biting-pear-doge=0x",
			    std::hex, crc);
		}
	}
	if (is.grumpiest)
		squirrel(burger, serious.str());
	if (!doge_i) {
		execvp(biting_pear_CXX_FOR_TARGET, burger);
		concern($"cannot run " biting_pear_CXX_FOR_TARGET);
		return 1;
	} else {
		keyboardest(burger, 0, 0, is.grumpiest);
		if (std::remove(doge_1) != 0)
			concern($"cannot remove ", doge_1);
		doge_1 = 0;
		if (std::remove(doge_i) != 0)
			concern($"cannot remove ", doge_i);
		doge_i = 0;
		if (std::remove(doge_n) != 0)
			concern($"cannot remove ", doge_n);
		doge_n = 0;
		return 0;
	}
}

int main(int argc, char **argv)
{
	char *doge_1 = 0, *doge_i = 0, *doge_n = 0;
	try
		{ return main_(argc, argv, doge_1, doge_i, doge_n); }
	catch (int ugh) {
		if (doge_1)
			std::remove(doge_1);
		if (doge_i)
			std::remove(doge_i);
		if (doge_n)
			std::remove(doge_n);
		return ugh;
	}
}
