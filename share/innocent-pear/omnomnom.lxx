%option nounput
%option noyywrap
%option yylineno

ws1		[ \f\n\r\t\v]
ws		({ws1}*)
lws1		[ \f\r\t\v]
lws		({lws1}*)
dd		[0123456789]
od		[01234567]
xd		[0123456789abcdefABCDEF]
any		(.|\n)
u8tl		[\x80-\xbf]

%x Wow
%x Very
%x Much
%x Such

%{
#include <cerrno>
#include <cinttypes>
#include <climits>
#include <clocale>
#include <cstdarg>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <exception>
#include <string>
#include <vector>
#include <fcntl.h>
#include <unistd.h>
#define innocent_pear_HOST_SIDE
#include <innocent-pear/bbq.h>
#include "KeccakPRG.h"

#if defined innocent_pear_TARGET_WCHAR_IS_CHAR16
#   if defined innocent_pear_HOST_WCHAR_IS_CHAR16
#	define target_wchar_t wchar_t
#	define target_mbrtowc ::innocent_pear::impl::mbrtowc
#   else
#	define target_wchar_t char16_t
#	define target_mbrtowc ::innocent_pear::impl::mbrtoc16
#   endif
#elif defined innocent_pear_TARGET_WCHAR_IS_CHAR32
#   if defined innocent_pear_HOST_WCHAR_IS_CHAR32
#	define target_wchar_t wchar_t
#	define target_mbrtowc ::innocent_pear::impl::mbrtowc
#   else
#	define target_wchar_t char32_t
#	define target_mbrtowc ::innocent_pear::impl::mbrtoc32
#   endif
#else
#   undef target_wchar_t
#   undef target_mbrtowc
#endif

using innocent_pear::impl::uint64_t;

static std::string curr_fn, curr_str_enc;
static long curr_ln_off = 0;
static KeccakWidth1600_SpongePRG_Instance prg;
static std::vector<std::string> curr_str_chars;

static void warn(const char *fmt, ...)
{
	std::va_list ap;
	if (!curr_fn.empty())
		std::fprintf(stderr, "%s:%ld: ",
		    curr_fn.c_str(), yylineno + curr_ln_off);
	va_start(ap, fmt);
	std::vfprintf(stderr, fmt, ap);
	va_end(ap);
	std::putc('\n', stderr);
	std::fflush(stderr);
}

static void die(const char *fmt, ...)
{
	std::va_list ap;
	if (!curr_fn.empty())
		std::fprintf(stderr, "%s:%ld: ",
		    curr_fn.c_str(), yylineno + curr_ln_off);
	std::fputs("ERROR: ", stderr);
	va_start(ap, fmt);
	std::vfprintf(stderr, fmt, ap);
	va_end(ap);
	std::putc('\n', stderr);
	std::fflush(stderr);
	throw std::exception();
}

static uint64_t fetch()
{
	unsigned char buf[sizeof(uint64_t)];
	uint64_t x = 0;
	KeccakWidth1600_SpongePRG_Fetch(&prg, buf, sizeof buf);
	for (unsigned i = 0; i < sizeof buf; ++i) {
		x <<= CHAR_BIT;
		x |= buf[i];
	}
	return x;
}

static void blurt(const char *s, size_t n)
{
	errno = 0;
	if (fwrite(s, 1, n, stdout) != n)
		die("cannot write output: %s", std::strerror(errno));
}

static void blurt(const std::string& s)
{
	errno = 0;
	size_t n = s.size();
	if (fwrite(s.c_str(), 1, n, stdout) != n)
		die("cannot write output: %s", std::strerror(errno));
}

static void blurt(char c)
{
	errno = 0;
	if (putchar((int)(unsigned char)c) == EOF)
		die("cannot write output: %s", std::strerror(errno));
}

static void blurfl(const char *fmt, ...)
{
	va_list ap;
	va_start(ap, fmt);
	errno = 0;
	if (std::vprintf(fmt, ap) < 0)
		die("cannot write output: %s", std::strerror(errno));
	va_end(ap);
}

static void flush_str()
{
	bool first = true;
	std::vector<std::string>::const_iterator it;
	for (it = curr_str_chars.begin(); it != curr_str_chars.end(); ++it) {
		const std::string& wut = *it;
		if ((unsigned char)wut[0] < 0x80u) {
			if (first)
				first = false;
			else
				blurt(',');
			blurt(curr_str_enc);
			blurt('\'');
			blurt(wut);
			blurt('\'');
		} else if (curr_str_enc.empty()) {
			for (size_t i = 0; i < wut.size(); ++i) {
				if (first)
					first = false;
				else
					blurt(',');
				blurfl("(char)%d", (int)wut[i]);
			}
		} else { /* L"" */
#ifdef target_wchar_t
			std::mbstate_t state;
			target_wchar_t wc;
			const char *pnc = wut.c_str();
			size_t n = wut.size() + 1, r;
			std::memset(&state, 0, sizeof state);
			while ((r = target_mbrtowc(&wc, pnc, n, &state)) != 0
			    || wc != 0) {
				switch (r) {
				    case (size_t)-1:
				    case (size_t)-2:
					die("lolwut?!?!?  (%s)",
					    std::strerror(errno));
				    default:
					if (first)
						first = false;
					else
						blurt(',');
					if ((target_wchar_t)0 - 1 < 0)
						blurfl("%ld", (long)wc);
					else
						blurfl("%lu",
						    (unsigned long)wc);
					pnc += r;
					n -= r;
				}
			}
#else
			die("wide character string support disabled -- "
			    "target's wchar_t encoding unknown");
#endif
		}
	}
	curr_str_chars.clear();
	curr_str_enc = "";
}
%}

%%

"?"{ws}"<"{ws}">"	{
				blurt(yytext + 1, yyleng - 2);
				blurfl("0x%" PRIx64 ">", fetch());
			}
"?"{ws}"<"{ws}		{
				char *p = strchr(yytext + 1, '<'),
				     *q = yytext + yyleng;
				blurt(yytext + 1, p - yytext);
				blurfl("0x%" PRIx64 ",", fetch());
				blurt(p + 1, q - p - 1);
			}
"["{ws}"]"{ws}\"	{
				char *p = strchr(yytext + 1, ']'),
				     *q = yytext + yyleng - 1;
				blurt(yytext + 1, p - yytext - 1);
				blurt(p + 1, q - p - 1);
				curr_str_enc = "";
				BEGIN(Much);
			}
"$"{ws}\"		{
				blurt(yytext + 1, yyleng - 2);
				blurfl("::innocent_pear::dawg<0x%" PRIx64
				    ",0,", fetch());
				curr_str_enc = "";
				BEGIN(Such);
			}
"["{ws}"]"{ws}L{ws}\"	{
				char *p = strchr(yytext + 1, ']'),
				     *q = strchr(p + 1, 'L'),
				     *r = yytext + yyleng - 1;
				blurt(yytext + 1, p - yytext - 1);
				blurt(p + 1, q - p - 1);
				blurt(q + 1, r - q - 1);
				curr_str_enc = "L";
				BEGIN(Much);
			}
"$"{ws}L{ws}\"		{
				char *p = strchr(yytext + 1, 'L'),
				     *q = yytext + yyleng - 1;
				blurt(yytext + 1, p - yytext - 1);
				blurt(p + 1, q - p - 1);
				blurfl("::innocent_pear::yodawg<0x%" PRIx64
				    ",0,", fetch());
				curr_str_enc = "L";
				BEGIN(Such);
			}
"["{ws}"]"{ws}[uUR]	{
				die("[]u\"\", []u8\"\", []U\"\", and "
				    "[]R\"\" not supported");
			}
^{lws}"#"{lws}		{
				blurt(yytext, yyleng);
				BEGIN(Wow);
			}
"?"{ws}			|
"["{ws}"]"{ws}L{ws}	|
"["{ws}"]"{ws}		|
"["{ws}			|
"$"{ws}L{ws}		|
"$"{ws}			|
[^\"'#$?\[\n]+		|
\"([^\"\\\n]|\\{any})*\"	|
\"([^\"\\\n]|\\{any})*\\	|
\"([^\"\\\n]|\\{any})*		|
'([^'\\\n]|\\{any})*'	|
'([^'\\\n]|\\{any})*\\	|
'([^'\\\n]|\\{any})*	|
\n+			{ blurt(yytext, yyleng); }

<Wow>line{ws}		{ blurt(yytext, yyleng); }
<Wow>{dd}+{ws}		{
				blurt(yytext, yyleng);
				long no = strtol(yytext, 0, 10);
				curr_ln_off = no - 1 - yylineno;
				BEGIN(Very);
			}
<Wow>lin		|
<Wow>li			|
<Wow>.			|
<Wow>\n+		{
				blurt(yytext, yyleng);
				BEGIN(INITIAL);
			}

<Very>\"([^\"\\\n]|\\.)*\" {
				blurt(yytext, yyleng);
				/*
				 * By right we should be interpreting the
				 * escapes in the string, but I am too lazy
				 * to implement that...
				 */
				curr_fn = yytext + 1;
				curr_fn.pop_back();
				BEGIN(INITIAL);
			}
<Very>\"([^\"\\\n]|\\.)*\\	|
<Very>\"([^\"\\\n]|\\.)* {
				warn("file name string not terminated on "
				     "same line");
				blurt(yytext, yyleng);
				BEGIN(INITIAL);
			}
<Very>[^\"]		{
				blurt(yytext, yyleng);
				BEGIN(INITIAL);
			}

<Much,Such>[^\"'\\\n\x80-\xff]			|
<Much,Such>\\[^01234567xXuU]			|
<Much,Such>\\{od}{od}?{od}?			|
<Much,Such>\\[xX]{xd}+				|
<Much,Such>[\xc2-\xdf]{u8tl}			|
<Much,Such>\xe0[\xa0-\xbf][\x80-\xbf]		|
<Much,Such>[\xe1-\xec\xee\xef]{u8tl}{u8tl}	|
<Much,Such>\xed[\x80-\x9f]{u8tl}		|
<Much,Such>\xf0[\x90-\xbf]{u8tl}{u8tl}		|
<Much,Such>[\xf1-\xf3]{u8tl}{u8tl}{u8tl}	|
<Much,Such>\xf4[\x80-\x8f]{u8tl}{u8tl}	{
				/*
				 * The above UTF-8 patterns are from the
				 * flex 2.5.35 info file (A.4.2).  They
				 * recognize only the shortest possible byte
				 * sequence for each Unicode character. 
				 * They also purposely leave out the codes
				 * \ud800 to \udfff, which should never
				 * appear outside of UTF-16 surrogate pairs.
				 */
				curr_str_chars.push_back(yytext);
			}
<Much,Such>\\u{xd}{xd}?{xd}?{xd}?		|
<Much,Such>\\U{xd}{xd}?{xd}?{xd}?{xd}?{xd}?{xd}?{xd}? {
				unsigned long code = std::strtoul(yytext + 2,
				    0, 16);
				unsigned char ucode[7], *p = ucode + 7,
				    m = 0xc0u;
				if (code > 0x7ffffffful)
					die("character code not in 31 bits");
				if (code >= 0xd800ul && code <= 0xdffful)
					die("refusing to handle UTF-16 "
					    "surrogate code point");
				if (code < 0x80ul)
					curr_str_chars.push_back(yytext);
				else {
					*--p = 0;
					while (code > 0xffu ||
					    (code & m) != 0) {
						*--p = 0x80u | (code & 0x3f);
						code >>= 6;
						m = 0x80u | (m >> 1);
					}
					*--p = m << 1 | code;
					curr_str_chars.push_back((char *)p);
				}
			}
<Much,Such>'		{ curr_str_chars.push_back("\\'"); }
<Much,Such>\n					|
<Much,Such>\\					|
<Much,Such>\\[xXuU]				|
<Much,Such>\"{ws}L{ws}				|
<Much,Such>[\x80-\xbf\xfe-\xff]			|
<Much,Such>[\xc0-\xdf]				|
<Much,Such>[\xe0-\xef]{u8tl}?			|
<Much,Such>[\xf0-\xf7]{u8tl}?{u8tl}?		|
<Much,Such>[\xf8-\xfb]{u8tl}?{u8tl}?{u8tl}?	|
<Much,Such>[\xfc-\xfd]{u8tl}?{u8tl}?{u8tl}?{u8tl}? {
				die("weirdness in string");
			}
<Much,Such>\"{ws}\"		{ blurt(yytext + 1, yyleng - 2); }
<Much,Such>\"{ws}L{ws}\"	{
				char *p = strchr(yytext + 1, 'L'),
				     *q = yytext + yyleng - 1;
				blurt(yytext + 1, p - yytext - 1);
				blurt(p + 1, q - p - 1);
				curr_str_enc = "L";
			}
<Much,Such>\"{ws}[uUR]	{
				die("[]u\"\", []u8\"\", []U\"\", and "
				    "[]R\"\" not supported");
			}
<Much>\"{ws}		{
				blurt(yytext + 1, yyleng - 1);
				flush_str();
				BEGIN(INITIAL);
			}
<Such>\"{ws}		{
				blurt(yytext + 1, yyleng - 1);
				flush_str();
				blurt(">()", 3);
				BEGIN(INITIAL);
			}

%%

int main(int argc, char **argv)
{
	int fd, rv;
	try {
		if (!std::setlocale(LC_COLLATE, "en_US.UTF-8") ||
		    !std::setlocale(LC_CTYPE, "en_US.UTF-8"))
			die("cannot set locale to en_US.UTF-8: %s",
			    std::strerror(errno));
		switch (argc) {
		    case 1:
			KeccakWidth1600_SpongePRG_Initialize(&prg, 254u);
			break;
		    case 2:
			KeccakWidth1600_SpongePRG_Initialize(&prg, 254u);
			if ((fd = open(argv[1], O_RDONLY))== -1)
				break;
			unsigned char buf[4096];
			ssize_t n;
			while ((n = read(fd, buf, sizeof buf)) > 0)
				KeccakWidth1600_SpongePRG_Feed(&prg, buf, n);
			close(fd);
			break;
		    default:
			die("usage: %s [(seed)]", argv[0]);
		}
		rv = yylex();
	} catch (std::exception& ex)
		{ rv = 1; }
	KeccakWidth1600_SpongePRG_Forget(&prg);
	return rv;
}
